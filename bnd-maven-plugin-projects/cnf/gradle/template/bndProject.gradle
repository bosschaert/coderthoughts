/*
 * WARNING
 *
 * This file is maintained automatically by Bndtools.
 * You should not edit it.
 *
 * See the BUILDING-GRADLE.md document in the root project for more details.
 *
 * Build template for bnd projects.
 */

import aQute.bnd.build.Container
import aQute.bnd.osgi.Constants


assert(project != rootProject                          )
assert(rootProject.hasProperty("bnd_buildDependencies"))


/* Setup the build dependencies */
buildscript {
  dependencies {
    classpath rootProject.bnd_buildDependencies
  }
}




/*
 * Helper Methods
 */

/*
 * Get a property from the project's flattened bnd properties.
 * Returns an empty string when the property is not set unless instructed to
 * throw an exception when the property is not set.
 */
String getBndProjectProperty(String key, boolean throwOnNotSet) {
  assert(project != null                       )
  assert(key != null && !key.isEmpty()         )
  assert(hasProperty("bnd_flattenedProperties"))

  def value = bnd_flattenedProperties.getProperty(key, null)
  if (value == null) {
    if (throwOnNotSet) {
      throw new GradleException("Bnd property \"$key\" not found in project $project.name")
    }
    value = ""
  }
  return value.trim()
}

/*
 * Parse a boolean the same way bnd parses it.
 */
boolean parseBoolean(String value) {
  return ("on".equalsIgnoreCase(value) || "true".equalsIgnoreCase(value))
}

/*
 * Determine which files will be included in the bundles of a project.
 */
FileTree getBundleInputFiles() {
  assert(project != null                 )
  assert(hasProperty("bnd_project"      ))
  assert(hasProperty("bnd_srcDir"       ))
  assert(hasProperty("bnd_srcBinDir"    ))
  assert(hasProperty("bnd_testSrcDir"   ))
  assert(hasProperty("bnd_testSrcBinDir"))
  assert(hasProperty("bnd_targetDir"    ))

  def tree = fileTree(projectDir)
                    .exclude("$bnd_srcDir/**"       )
                    .exclude("$bnd_srcBinDir/**"    )
                    .exclude("$bnd_testSrcDir/**"   )
                    .exclude("$bnd_testSrcBinDir/**")
                    .exclude("$bnd_targetDir/**"    )

  def includedResources = fileTree(projectDir).include("$bnd_srcBinDir/**")
  bnd_project.subBuilders.each { subBuilder ->
    tree.each { f ->
      if (!includedResources.contains(f) && subBuilder.isInScope([f])) {
        includedResources.include(relativePath(f))
      }
    }
  }

  return includedResources
}


/*
 * Determine which files are generated by the bundle task of a project.
 */
FileTree getBundleOutputFiles() {
  assert(project != null             )
  assert(hasProperty("bnd_project"  ))
  assert(hasProperty("bnd_targetDir"))

  def bundleOutputs = fileTree(projectDir).include("$bnd_targetDir/" + Constants.BUILDFILES)

  bnd_project.subBuilders.each { subBuilder ->
    bundleOutputs.include(relativePath(bnd_project.getOutputFile(subBuilder.bsn)))
  }

  return bundleOutputs
}


/*
 * Convert a bnd (class)path to a gradle file collection.
 */
List<File> bndPathToFileList(Collection<Container> path) {
  def files = new LinkedList<File>()
  if (path != null) {
    path.each {
      if (!files.contains(it.file)) {
        files.add(it.file)
      }
    }
  }

  return files
}


/*
 * Print bnd project warnings and errors and exit when errors are not allowed.
 */
void printBndProjectWarningsAndErrors() {
  assert(project != null           )
  assert(hasProperty("bnd_project"))

  def errorCount = 0

  bnd_project.warnings.each {
    logger.warn  "Warning: " + it
  }
  bnd_project.errors.each {
    logger.error "Error  : " + it
    errorCount++
  }
  if (!bnd_project.isOk()) {
    def str = "even though no errors were reported"
    if (errorCount == 1) {
      str = "$errorCount error was reported"
    } else if (errorCount > 1) {
      str = "$errorCount errors were reported"
    }
    throw new GradleException("Project $project.name is invalid, " + str)
  }
}




/*
 * Bnd Project
 */

assert(rootProject.hasProperty("bnd_cnf"                         ))
assert(            hasProperty("bnd_project"                     ))
assert(            hasProperty("gradleBuild_compileDeprecation"  ))
assert(            hasProperty("gradleBuild_compileFork"         ))
assert(            hasProperty("gradleBuild_compileVerbose"      ))
assert(            hasProperty("gradleBuild_exportDir"           ))
assert(            hasProperty("gradleBuild_testEnableAssertions"))
assert(            hasProperty("gradleBuild_testIgnoreFailures"  ))
assert(            hasProperty("gradleBuild_testMaxParallelForks"))


bnd_project.prepare()
if (!bnd_project.isValid()) {
  printBndProjectWarningsAndErrors()
  throw new GradleException("Project $project is not a valid bnd project")
}

/* Flatten/Resolve all bnd project properties */
ext.bnd_flattenedProperties          = bnd_project.getFlattenedProperties(false)

/* Source and output directory settings */
ext.bnd_srcDir                       = relativePath(bnd_project.src               )
ext.bnd_srcBinDir                    = relativePath(bnd_project.srcOutput         )
ext.bnd_testSrcDir                   = relativePath(bnd_project.testSrc           )
ext.bnd_testSrcBinDir                = relativePath(bnd_project.testOutput        )
ext.bnd_targetDir                    = relativePath(bnd_project.targetDir         )
ext.bnd_exportDir                    = "$bnd_targetDir/$gradleBuild_exportDir"

/* Classpaths */
ext.bnd_classPath                    = bndPathToFileList(bnd_project.buildpath    )
ext.bnd_classPathBoot                = bndPathToFileList(bnd_project.bootclasspath)
ext.bnd_classPathTest                = bndPathToFileList(bnd_project.testpath     )
ext.bnd_classPathRun                 = bndPathToFileList(bnd_project.runpath      )

/* Java compiler options */
ext.bnd_debug                        = parseBoolean(getBndProjectProperty("javac.debug" , false))
ext.bnd_java                         =              getBndProjectProperty("java"        , true )
ext.bnd_javac                        =              getBndProjectProperty("javac"       , true )
ext.bnd_javacSource                  =              getBndProjectProperty("javac.source", true )
ext.bnd_javacTarget                  =              getBndProjectProperty("javac.target", true )

/* Other settings */
ext.bnd_verbose                      = parseBoolean(getBndProjectProperty(Constants.VERBOSE    , false))
ext.bnd_releaseRepo                  =              getBndProjectProperty(Constants.RELEASEREPO, false)

/* File trees */
ext.bnd_runFiles                     = fileTree(projectDir).include("*.bndrun")


/* A bnd project is a java project */
apply plugin: "java"

/* Setup the bnd project layout */
apply from: rootProject.file("$rootProject.bnd_cnf/gradle/template/bndLayout.gradle")


/* Setup java compiler classpaths */
dependencies.add("compile"    , files(bnd_classPath    ))
dependencies.add("testCompile", files(bnd_classPathTest))

if (!bnd_classPathBoot.isEmpty()) {
  def classPathBootAsPath = files(bnd_classPathBoot).asPath
  compileJava.options.compilerArgs          += ["-Xbootclasspath/p:$classPathBootAsPath"]
  compileTestJava.options.compilerArgs      += ["-Xbootclasspath/p:$classPathBootAsPath"]
}

/* Setup java compiler options */
sourceCompatibility                  = bnd_javacSource
if (bnd_javacTarget ==~ "^\\d+\\.\\d+\$") {
  targetCompatibility                = bnd_javacTarget
} else {
  compileJava.options.compilerArgs          += ["-target", bnd_javacTarget]
}
compileJava.options.debug                    = bnd_debug
compileJava.options.listFiles                = bnd_verbose
compileJava.options.verbose                  = gradleBuild_compileVerbose
compileJava.options.fork                     = gradleBuild_compileFork
compileJava.options.deprecation              = gradleBuild_compileDeprecation
compileJava.options.forkOptions.setExecutable(bnd_javac)

compileTestJava.options.debug                = bnd_debug
compileTestJava.options.listFiles            = bnd_verbose
compileTestJava.options.verbose              = gradleBuild_compileVerbose
compileTestJava.options.fork                 = gradleBuild_compileFork
compileTestJava.options.deprecation          = gradleBuild_compileDeprecation
compileTestJava.options.forkOptions.setExecutable(bnd_javac)

/* Setup test options */
test.enableAssertions                        = gradleBuild_testEnableAssertions
test.ignoreFailures                          = gradleBuild_testIgnoreFailures
test.maxParallelForks                        = gradleBuild_testMaxParallelForks

/* Override the javadoc bootclasspath */
ext.gradleBuild_javadocClassPathBoot = bnd_classPathBoot

/* Declare that we're in the offline build */
bnd_project.setProperty("in.ant", "true")

/*
 * Setup tasks
 */

/* Add tasks that are relevant to Java projects */
apply from: rootProject.file("$rootProject.bnd_cnf/gradle/template/javaProject.gradle")

clean.doLast {
  bnd_project.clean()
}

task bundle {
  description   "Assembles OSGi bundle(s)."
  group         "Build"
  inputs.files  { getBundleInputFiles()  }
  outputs.files { getBundleOutputFiles() }

  doLast {
    try {
      def targetDir = file(bnd_targetDir)
      if ((!targetDir.exists() && !targetDir.mkdirs()) || !targetDir.isDirectory()) {
        throw new GradleException("Could not create directory $targetDir")
      }
      bnd_project.build()
      printBndProjectWarningsAndErrors()
    } catch (Exception e) {
      throw new GradleException("Building OSGi bundle(s) of project $project.name failed", e)
    }
  }
}

task release {
  description  "Release OSGi bundle(s) into the release repository."
  group        "Release"
  inputs.files { getBundleOutputFiles() }

  doLast {
    try {
      bnd_project.release(bnd_releaseRepo, false)
      printBndProjectWarningsAndErrors()
    } catch (Exception e) {
      throw new GradleException("Releasing OSGi bundle(s) of project $project.name failed", e)
    }
  }
}

task releaseNeeded {
  description "Release OSGi bundle(s) and those of all projects this project depends on."
  group       "Release"
}

task export {
  description   "Export bndrun files to runable jars."
  group         "Export"
  inputs.files  { bnd_runFiles + getBundleOutputFiles()                }
  outputs.files { fileTree(projectDir).include("$bnd_exportDir/*.jar") }

  doLast {
    def exportDir = file(bnd_exportDir)
    if ((!exportDir.exists() && !exportDir.mkdirs()) || !exportDir.isDirectory()) {
      throw new GradleException("Could not create directory $exportDir")
    }
    bnd_runFiles.each { f ->
      def runFile = relativePath(f)
      def jarFile = runFile.replaceAll("\\.bndrun\$", ".jar")
      try {
        bnd_project.export(runFile, false, file("$bnd_exportDir/$jarFile"))
        printBndProjectWarningsAndErrors()
      } catch (Exception e) {
        throw new GradleException("Exporting $runFile of project $project.name failed", e)
      }
    }
  }
}

task bundleTest {
  description  "Run OSGi tests."
  group        "Verification"
  inputs.files { getBundleOutputFiles() }

  doLast {
    try {
      bnd_project.test()
      printBndProjectWarningsAndErrors()
    } catch (Exception e) {
      throw new GradleException("Running OSGi tests in project $project.name failed", e)
    }
  }
}

task bndproperties {
  description "Display bnd properties."
  group       "Help"

  doLast {
    println ""
    println "------------------------------------------------------------"
    println "Project $project.name"
    println "------------------------------------------------------------"
    println ""

    def keys = []
    bnd_flattenedProperties.each {
      keys += it.key
    }

    keys.sort({ s1, s2 -> return s1.compareTo(s2)}).each {
      println String.format("%s: %s", it, getBndProjectProperty(it, false))
    }
  }
}


/*
 * Setup task dependencies
 */

jar.enabled                  = false

bundle.dependsOn            += [classes                          ]
jar.dependsOn               += [bundle                           ]
release.dependsOn           += [bundle                           ]
releaseNeeded.dependsOn     += [release                          ]
export.dependsOn            += [bundle                           ]
bundleTest.dependsOn        += [bundle                           ]
test.dependsOn              += [bundle                           ]
check.dependsOn             += [bundleTest                       ]

bnd_project.dependson.each {
  compileJava.dependsOn     += [":" + it.name + ":bundle"        ]
  releaseNeeded.dependsOn   += [":" + it.name + ":releaseNeeded" ]
}


/*
 * Setup task skipping
 */

ext.bnd_noJunit1       = parseBoolean(getBndProjectProperty(Constants.NOJUNIT    , false))
ext.bnd_noJunit2       = parseBoolean(getBndProjectProperty("no.junit"           , false))
ext.bnd_noJunitOsgi    = parseBoolean(getBndProjectProperty(Constants.NOJUNITOSGI, false))
ext.bnd_testCases      =              getBndProjectProperty(Constants.TESTCASES  , false)
ext.bnd_noBundles      = bnd_project.isNoBundles()

ext.bnd_doBundle       = !bnd_noBundles
ext.bnd_doRelease      = !bnd_releaseRepo.isEmpty()
ext.bnd_doJUnitTests   = !(bnd_noJunit1    || bnd_noJunit2)
ext.bnd_doBundleTests  = !(bnd_noJunitOsgi || bnd_testCases.isEmpty())
ext.bnd_doExport       = !bnd_runFiles.isEmpty()


bundle.onlyIf            { bnd_doBundle      }
release.onlyIf           { bnd_doRelease     }
test.onlyIf              { bnd_doJUnitTests  }
bundleTest.onlyIf        { bnd_doBundleTests }
export.onlyIf            { bnd_doExport      }


/* Load the build customisations */
apply from: rootProject.file("$rootProject.bnd_cnf/gradle/custom/bndProjects.gradle")
